#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define pii pair<int, int>
#define pll pair<long long, long long>
#define vi vector<int>
#define vll vector<long long>
#define si set<int>
#define sll set<long long>
#define sc set<char>
#define vc vector<char>

#define rep(i, a, b) for (int i = a; i < b; i++)
#define repb(i, a, b) for (int i = a; i <= b; i++)
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
#define ff first
#define ss second
#define ln endl

#define mp make_pair
#define pqueue priority_queue
#define pb push_back

ll gcd(const ll a, const ll b) { return (b == 0 ? a : gcd(b, a % b)); }
ll lcm(const ll a, const ll b) { return a / gcd(a, b) * b; }
ll binpow(ll a, ll n) { ll ans = 1; for (; n; n /= 2, a *= a) if (n & 1) ans *= a; return ans; }
ll binpow(ll a, ll n, const ll &mod) { ll ans = 1; for (; n; n /= 2, a = a * a % mod) if (n & 1) ans = ans * a % mod; return ans; }
ll cdiv(const ll &a, const ll &b) { return (a / b + ((a ^ b) > 0 && a % b)); }
ll fdiv(const ll &a, const ll &b) { return a / b - ((a ^ b) < 0 && a % b); }
const ll mod = 1000000007;
// const ll mod = 998244353;
int n, k;
vll a;
int index;

bool check(int x) {
    if (x > n) return false;
    map<ll, int> s;
    rep(i, 0, x) s[a[i]]++;
    if (s.size() <= k) {
        index = 0;
        return true;
    }
    rep(i, x, n) {
        s[a[i - x]]--;
        if (s[a[i - x]] <= 0) s.erase(a[i - x]);
        s[a[i]]++;
        if (s.size() <= k) {
            index = i - x + 1;
            return true;
        }
    }
    return false;
}

void solve() {
    scanf("%d %d", &n, &k);
    a.resize(n);
    rep(i, 0, n) scanf("%lld", &a[i]);

    int l = 1, r = n, res = -1;
    while (l <= r) {
        int mid = l + ((r - l) >> 1);
        if (check(mid)) {
            l = mid + 1;
            res = mid;
        } else {
            r = mid - 1;
        }
    }
    printf("%d %d\n", index + 1, index + res);
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
    return 0;
}
//TLE solution for Longest-K-good-segment problem O(nlogn)
